name: Reliability Gate

on:
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  detect-new-tests:
    runs-on: ubuntu-latest
    name: Detect New Tests
    outputs:
      new_tests: ${{ steps.find-new-tests.outputs.new_tests }}
      test_classes: ${{ steps.find-new-tests.outputs.test_classes }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'
          cache: 'gradle'

      - name: Find new tests
        id: find-new-tests
        run: |
          # Get the base branch reference
          BASE_REF=${{ github.base_ref }}

          # Find all new or modified Kotlin test files in this PR
          NEW_TEST_FILES=$(git diff --name-only --diff-filter=AM origin/$BASE_REF... | grep -E ".*Test\.kt$" || echo "")

          if [ -z "$NEW_TEST_FILES" ]; then
            echo "No new test files found"
            echo "new_tests=false" >> $GITHUB_OUTPUT
            exit 0
          fi

          # Check if there are any new test methods in these files
          HAS_NEW_TESTS=false
          CLASSES=""

          for FILE in $NEW_TEST_FILES; do
            # Get test methods in current version
            CURRENT_TESTS=$(grep -E "^\s*@Test" "$FILE" | wc -l)

            # Get test methods in base branch version
            BASE_TESTS=$(git show origin/$BASE_REF:"$FILE" 2>/dev/null | grep -E "^\s*@Test" | wc -l || echo "0")

            # Extract package name from the file
            PACKAGE=$(grep -E "^package " "$FILE" | sed 's/package //g' | sed 's/;//g')

            # Extract class name from filename
            CLASS_NAME=$(basename "$FILE" .kt)

            # Check if there are new tests
            if [ "$CURRENT_TESTS" -gt "$BASE_TESTS" ]; then
              HAS_NEW_TESTS=true

              # Append to list of classes
              if [ -z "$CLASSES" ]; then
                CLASSES="$PACKAGE.$CLASS_NAME"
              else
                CLASSES="$CLASSES,$PACKAGE.$CLASS_NAME"
              fi
            fi
          done

          if [ "$HAS_NEW_TESTS" = true ]; then
            echo "Found new test classes: $CLASSES"
            echo "new_tests=true" >> $GITHUB_OUTPUT
            echo "test_classes=$CLASSES" >> $GITHUB_OUTPUT
          else
            echo "No new test methods found in modified files"
            echo "new_tests=false" >> $GITHUB_OUTPUT
          fi
  reliability-gate:
    runs-on: ubuntu-latest
    name: Reliability Gate
    needs: detect-new-tests
    if: ${{ needs.detect-new-tests.outputs.new_tests == 'true' }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'
          cache: 'gradle'

      - name: Create Reliability Test Task
        run: |
          # Create a custom Gradle task file for running reliability tests
          mkdir -p buildSrc/src/main/kotlin
          cat > buildSrc/src/main/kotlin/ReliabilityGate.kt << 'EOF'
          import org.gradle.api.DefaultTask
          import org.gradle.api.GradleException
          import org.gradle.api.file.DirectoryProperty
          import org.gradle.api.provider.Property
          import org.gradle.api.tasks.Input
          import org.gradle.api.tasks.OutputDirectory
          import org.gradle.api.tasks.TaskAction
          import org.gradle.kotlin.dsl.register
          import org.gradle.api.Project
          import org.gradle.api.Plugin
          
          class ReliabilityGatePlugin : Plugin<Project> {
              override fun apply(project: Project) {
                  project.tasks.register<ReliabilityGateTask>("reliabilityGate") {
                      group = "verification"
                      description = "Runs new tests multiple times to detect flakiness"
                  }
              }
          }
          
          abstract class ReliabilityGateTask : DefaultTask() {
              @get:Input
              val testClasses: Property<String> = project.objects.property(String::class.java)
          
              @get:Input
              val iterations: Property<Int> = project.objects.property(Int::class.java).convention(5)
          
              @get:OutputDirectory
              val reportDir: DirectoryProperty = project.objects.directoryProperty()
                  .convention(project.layout.buildDirectory.dir("reports/reliability-gate"))
          
              @TaskAction
              fun execute() {
                  if (testClasses.get().isEmpty()) {
                      logger.lifecycle("No test classes specified. Skipping reliability gate.")
                      return
                  }
          
                  val classes = testClasses.get().split(",")
                  logger.lifecycle("Running reliability gate for ${classes.size} test classes with ${iterations.get()} iterations each")
          
                  var failedTests = mutableListOf<String>()
          
                  for (testClass in classes) {
                      logger.lifecycle("Testing reliability of: $testClass")
          
                      repeat(iterations.get()) { iteration ->
                          logger.lifecycle("  Iteration ${iteration + 1}/${iterations.get()}")
          
                          // Run the test using Gradle's test task
                          val result = project.exec {
                              commandLine = listOf(
                                  "./gradlew", 
                                  "test", 
                                  "--tests", 
                                  testClass,
                                  "--no-build-cache",
                                  "--rerun-tasks"
                              )
                              isIgnoreExitValue = true
                          }
          
                          if (result.exitValue != 0) {
                              logger.error("  ❌ Test failed in iteration ${iteration + 1}")
                              if (!failedTests.contains(testClass)) {
                                  failedTests.add(testClass)
                              }
                              break // No need to run remaining iterations for this test
                          } else {
                              logger.lifecycle("  ✓ Test passed")
                          }
                      }
                  }
          
                  if (failedTests.isNotEmpty()) {
                      throw GradleException(
                          "❌ Reliability gate failed! The following tests are flaky:\n" +
                          failedTests.joinToString("\n") { "  - $it" } + "\n" +
                          "Fix these flaky tests before merging this pull request."
                      )
                  } else {
                      logger.lifecycle("✅ Reliability gate passed! All tests are reliable.")
                  }
              }
          }
          EOF
          
          # Create the Gradle Plugin registration file
          mkdir -p buildSrc/src/main/resources/META-INF/gradle-plugins
          cat > buildSrc/src/main/resources/META-INF/gradle-plugins/reliability-gate.properties << EOF
          implementation-class=ReliabilityGatePlugin
          EOF
          
          # Create build.gradle.kts in buildSrc
          cat > buildSrc/build.gradle.kts << EOF
          plugins {
              `kotlin-dsl`
          }
          
          repositories {
              mavenCentral()
          }
          EOF

      - name: Run reliability gate
        run: |
          # Apply the plugin to the project's build.gradle.kts
          if ! grep -q "id(\"reliability-gate\")" build.gradle.kts; then
            echo "plugins { id(\"reliability-gate\") }" >> build.gradle.kts
          fi
          
          # Run the reliability gate task
          TEST_CLASSES="${{ needs.detect-new-tests.outputs.test_classes }}"
          ./gradlew reliabilityGate -PtestClasses="$TEST_CLASSES"

      - name: Comment on PR
        if: always()
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { owner, repo } = context.repo;
            const run_id = context.runId;
            const run_status = '${{ job.status }}';
            const test_classes = '${{ needs.detect-new-tests.outputs.test_classes }}'.split(',').join('\n- ');
            
            let body = '';
            if (run_status === 'success') {
              body = `### ✅ Reliability Gate Passed
            
            All new tests have passed the reliability gate check! They were consistently run 5 times with no failures.
            
            **Tested classes:**
            - ${test_classes}
            
            [View details](https://github.com/${owner}/${repo}/actions/runs/${run_id})`;
            } else {
              body = `### ❌ Reliability Gate Failed
            
            Some of the new tests are flaky and failed the reliability gate check. Please fix these tests before merging.
            
            **Tested classes:**
            - ${test_classes}
            
            [View failure details](https://github.com/${owner}/${repo}/actions/runs/${run_id})`;
            }
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner,
              repo,
              body
            });
