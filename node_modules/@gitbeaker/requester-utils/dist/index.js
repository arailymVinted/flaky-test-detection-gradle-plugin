'use strict';

var qs = require('qs');
var xcase = require('xcase');

// src/RequesterUtils.ts
function formatQuery(params = {}) {
  const decamelized = xcase.decamelizeKeys(params);
  return qs.stringify(decamelized, { arrayFormat: "brackets" });
}
function isFormData(object) {
  return typeof object === "object" && object.constructor.name === "FormData";
}
function defaultOptionsHandler(resourceOptions, {
  body,
  searchParams,
  sudo,
  signal,
  asStream = false,
  method = "get"
} = {}) {
  const { headers: preconfiguredHeaders, url } = resourceOptions;
  const headers = { ...preconfiguredHeaders };
  const defaultOptions = {
    headers,
    method,
    asStream,
    signal,
    prefixUrl: url
  };
  if (sudo)
    defaultOptions.headers.sudo = `${sudo}`;
  if (body) {
    if (isFormData(body)) {
      defaultOptions.body = body;
    } else {
      defaultOptions.body = JSON.stringify(xcase.decamelizeKeys(body));
      headers["content-type"] = "application/json";
    }
  }
  const q = formatQuery(searchParams);
  if (q)
    defaultOptions.searchParams = q;
  return Promise.resolve(defaultOptions);
}
function createRequesterFn(optionsHandler, requestHandler) {
  const methods = ["get", "post", "put", "patch", "delete"];
  return (serviceOptions) => {
    const requester = {};
    methods.forEach((m) => {
      requester[m] = async (endpoint, options) => {
        const requestOptions = await optionsHandler(serviceOptions, { ...options, method: m });
        return requestHandler(endpoint, requestOptions);
      };
    });
    return requester;
  };
}
function extendClass(Base, customConfig = {}) {
  return class extends Base {
    constructor(...options) {
      const [config, ...opts] = options;
      super({ ...customConfig, ...config }, ...opts);
    }
  };
}
function presetResourceArguments(resources, customConfig = {}) {
  const updated = {};
  Object.entries(resources).filter(([, s]) => typeof s === "function").forEach(([k, r]) => {
    updated[k] = extendClass(r, customConfig);
  });
  return updated;
}

// src/BaseResource.ts
var BaseResource = class {
  url;
  requester;
  queryTimeout;
  headers;
  camelize;
  rejectUnauthorized;
  constructor({
    sudo,
    profileToken,
    camelize,
    requesterFn,
    profileMode = "execution",
    host = "https://gitlab.com",
    prefixUrl = "",
    rejectUnauthorized = true,
    queryTimeout = 3e5,
    ...tokens
  }) {
    if (!requesterFn)
      throw new ReferenceError("requesterFn must be passed");
    this.url = [host, "api", "v4", prefixUrl].join("/");
    this.headers = {};
    this.rejectUnauthorized = rejectUnauthorized;
    this.camelize = camelize;
    this.queryTimeout = queryTimeout;
    if ("oauthToken" in tokens)
      this.headers.authorization = `Bearer ${tokens.oauthToken}`;
    else if ("jobToken" in tokens)
      this.headers["job-token"] = tokens.jobToken;
    else if ("token" in tokens)
      this.headers["private-token"] = tokens.token;
    else {
      throw new ReferenceError("A token, oauthToken or jobToken must be passed");
    }
    if (profileToken) {
      this.headers["X-Profile-Token"] = profileToken;
      this.headers["X-Profile-Mode"] = profileMode;
    }
    if (sudo)
      this.headers.Sudo = `${sudo}`;
    this.requester = requesterFn({ ...this });
  }
};

exports.BaseResource = BaseResource;
exports.createRequesterFn = createRequesterFn;
exports.defaultOptionsHandler = defaultOptionsHandler;
exports.formatQuery = formatQuery;
exports.presetResourceArguments = presetResourceArguments;
